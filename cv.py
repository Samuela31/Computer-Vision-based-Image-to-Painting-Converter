# -*- coding: utf-8 -*-
"""cv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fCdPl6-qi76O6KEk1tAruc96tTZpRBTJ
"""

#pip install opencv-python

import cv2
import numpy as np

def apply_anime_filter(image):
    # Resize the image to a smaller size for faster processing
    resized_image = cv2.resize(image, (300, 300))

    # Convert the image to grayscale
    gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)

    # Apply bilateral filter to smooth the image while preserving edges
    gray = cv2.bilateralFilter(gray, 11, 17, 17)

    # Detect edges in the image and apply a threshold to obtain a binary image
    edges = cv2.Canny(gray, 30, 200)
    _, thresh = cv2.threshold(edges, 200, 255, cv2.THRESH_BINARY_INV)

    # Create a black image with the same dimensions as the original image
    black_image = np.zeros_like(resized_image)

    # Combine the original image with the black image using bitwise and to get a cartoon effect
    cartoon = cv2.bitwise_and(resized_image, resized_image, mask=thresh)

    return cartoon

'''# Example usage
if __name__ == "__main__":
    input_image_path = '/content/sample_data/cv-image.jpeg'
    output_image_path = '/content/anime_filtered_image.jpg'

    # Load the input image
    input_image = cv2.imread(input_image_path)

    # Apply the anime filter
    output_image = apply_anime_filter(input_image)

    # Save the output image
    cv2.imwrite(output_image_path, output_image)

    # Display the output image (for Google Colab)
    cv2_imshow(output_image)'''